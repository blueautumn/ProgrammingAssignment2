A <- matrix( c(5, 1, 0,
3,-1, 2,
4, 0,-1), nrow=3, byrow=TRUE)
det(A)
a
A
inv(A)
inv(t(A)
inverse.rle(A)
inverse(t(A))
?inv
??inv
library(matlib)
solve(A)
a
A
makeVector
makeVector(5)
source('~/Downloads/datasciencecoursera/ProgrammingAssignment2/Untitled.R')
source('~/Downloads/datasciencecoursera/ProgrammingAssignment2/Untitled.R')
makeVector(5)
cachemean
View(makeVector)
makeVector
makeVector("5")
makeVector(10)
makeVector(A)
cachemean(5)
makeCacheMatrix(A)
source('~/Downloads/datasciencecoursera/ProgrammingAssignment2/cachematrix.R')
makeCacheMatrix(A)
CacheMatrix <- makeCacheMatrix(A)
View(CacheMatrix)
CacheMatrix$getMatrix()
CacheMatrix <- makeCacheMatrix(A)
CacheMatrix
CacheMatrix$getMatrix()
CacheMatrix <- makeCacheMatrix(TestMatrix)
CacheMatrix <- makeCacheMatrix(A)
CacheMatrix$getMatrix()
TestMatrix
TestMatrix <- matrix(1:4,2,2)
TestMatrix
CacheMatrix <- makeCacheMatrix(TestMatrix)
CacheMatrix$getMatrix()
CacheMatrix <- makeCacheMatrix(TestMatrix)
cacheSolve(CacheMatrix)
cacheSolve(CacheMatrix)
m <- mean(data, ...)
cachemean <- function(x) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
makeVector(10)
cachemean(makeVector(10))
source(cachematrix)
source(cachematrix.R)
getwd()
source(cachematrix.R)
source('~/Downloads/datasciencecoursera/ProgrammingAssignment2/cachematrix.R')
makeCacheMatrix()
TestMatrix <- matrix(1:4,2,2)
TestMatrix
CacheMatrix <- makeCacheMatrix(TestMatrix)
cacheSolve(CacheMatrix)
